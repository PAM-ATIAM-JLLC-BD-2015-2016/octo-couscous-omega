function [ initial_excitation_v ] = F_compute_initial_excitation_v( ...
    string_modes_number, body_modes_number, ...
    string_length, x_excitation, excitation_width, ...
    static_height_body, initial_height, ...
    modes_m )
%% Compute projections of the initial displacement over the system's mode
% Use numerical integration to compute the modal contributions

modes_number = string_modes_number + body_modes_number;

excitation_min = x_excitation - excitation_width/2;
excitation_max = x_excitation + excitation_width/2;

F_initial_displacement = ...
    @(x) (static_height_body * x / string_length + ...
        (x <= excitation_min ) * initial_height .* (x / x_excitation) + ...
        (x > excitation_min & x <= excitation_max) * initial_height + ...
        (x > excitation_max) * ...
            (initial_height) .* (string_length - x)/(string_length));
        
initial_excitation_v = zeros(modes_number,1);
        
for mode_n = 1:modes_number
   mode_shape_v =  modes_m(1:string_modes_number,mode_n);
   F_modal_shape = @(x) (sum(diag(mode_shape_v) * ...
       sin((1:string_modes_number).'*x * pi/string_length),1));
   
   initial_excitation_v(mode_n) = integral(...
       @(x) (F_initial_displacement(x) .* conj(F_modal_shape(x))), ...
       0, string_length);
end

end